---
title: "Low level R"
author: "Fabrice Rossi"
format: html
---

## R objects

R has variables that are used to access objects:

- functions
- data

### Functions

A function provides an action over objects or R itself. 

#### R related functions

```{r}
## this is the i_am function defined in the package here
## in general package::function
here::i_am("r-101-2024.Rproj")
## library loads the functions defined in a package (here)
library(here)
```

#### Functions that operate on objects

```{r}
class(1.0)
class(class)
```

If `f` is a function, `f(...)` applies the function to its parameters while 
`f` is the function as an object. 

## Data

Data objects can be separated into two main categories:

- vector: a finite set of values of a given type (like integers)
- list: a finite set of vectors (possibly of different types)

### Numerical vectors

```{r}
x <- 2
x
## x is a numeric vector
class(x)
## the type of x content is double
typeof(x)
```

```{r}
y <- 2L ## make clear to R that 2 is an integer (add L)
y
## y is a integer vector
class(y)
## the type of y content is integer
typeof(y)
```

```{r}
## square root calculation
z <- sqrt(y)
class(z)
typeof(z)
z
```

```{r}
## c is a construction function
x2 <- c(-2, 3, -1.5)
class(x2)
typeof(x2)
x2
```

Most of the functions operate in vectorized mode, i.e. their actions are applied
to each element of a vector independently from the other elements.

```{r}
## absolute value
y2 <- abs(x2)
y2
```

```{r}
sqrt(abs(x2))
```

```{r}
#| warning: false
sqrt(x2)
```

The special value `NaN` stands for *Not a Number* and is used when a numerical 
value cannot be associated to a mathematical expression. 

#### Numerical expressions

```{r}
x3 <- c(1, 2, -4)
y3 <- c(-1, 7, 42)
x3 + y3
```

```{r}
## vectorized product
x3 * y3
```

```{r}
z3 <- (x3 * y3) / (x3 + y3)
z3
```

```{r}
z3 + abs(z3)
z3 + x3
```

### Individual access

```{r}
## sequence from 0 to 5 (both included) with 0.5 increment (default 1)
x <- seq(0, 5, 0.5)
x
```

```{r}
length(x)
```

```{r}
## access to the third value in x
x[3]
```

```{r}
## out of range access gives NA
x[12]
```

The special value `NA` stands for `Not Available`. It is used for missing data
for instance.

```{r}
class(x[12])
typeof(x[12])
```

```{r}
## access to multiple values (sub-vector)
x[c(2, 4, 10)]
```

```{r}
## access to multiple values (sub-vector)
## negative values "remove" non wanted values
x[c(-2, -4, -10)]
```

```{r}
## a:b represents in a very efficient way the sequence from a to b (included) with
## 1 increment
x[4:8]
```

```{r}
x <- seq(-5, 5)
x[x > 0]
y <- seq(1, 11)
x[y / 3 < x]
x[c(TRUE, FALSE)]
```


### Reusing values

```{r}
x1 <- 5
x2 <- seq(0, 4)
x1
x2
```

```{r}
x1 + x2 ## ??
```

```{r}
x2 + 1
```

```{r}
2 * x2 - 1
```

```{r}
1 / x2
```

```{r}
y <- seq(0, 5)
z <- c(1, -1)
y + z
```

```{r}
y <- seq(0, 4)
z <- c(1, -1)
y + z
```

### Other types
#### Characters
```{r}
x <- seq(4, -2, -1)
x
y <- class(x)
y
```

```{r}
class(y)
typeof(y)
```

```{r}
z <- c("toto", "titi")
class(z)
typeof(z)
z
```

In base R, "characters" are essentially monolithic. Use the `stringr` package to 
access the characters themselves.

```{r}
z[1][1]
```

```{r}
x <- seq(4, -2, -1)
y <- as.character(x)
y
x + 2
## does not work as y is not numeric: y + 2
```

```{r}
x <- c("1.5", "12", "toto")
y <- as.numeric(x)
y
```

#### Logical

The logical type is obtained as the result of logical operations such as 
comparisons (comparisons are vectorized).

```{r}
z <- seq(-2, 2)
y <- z > 0
y
class(y)
typeof(y)
```

```{r}
z == 0 ## equality
z != 0 ## difference
z >= 1
```

```{r}
y <- c(TRUE, FALSE, FALSE, TRUE)
y
```

```{r}
## useless
y == TRUE
## non explicit
y != TRUE
## negation operator
!y
```

In addition to the negation operator, we have *or* `|` and *and* `&`.

```{r}
z <- seq(-5, 5)
(z >= 4) | (z <= -3)
(z < 3) & (z >= -2)
```

```{r}
(z[2] > 4) | (z < 0) ## values are reused
```

### Factors
Factors are used to represented nominal and ordinal variables.

```{r}
z <- c("F", "F", "H", "F", "H")
z
class(z)
y <- as.factor(z)
y
class(y)
length(y)
levels(y) ## modalities
x <- levels(y)
class(x)
```

```{r}
z <- c("F", "F", "h", "F", "H")
as.factor(z)
y <- factor(z, levels = c("F", "H"))
y
```

```{r}
y == "F"
y[-(1:3)]
y + 2
```

### Aggregation operators
Aggregation operators are functions that map a vector to a single value, for instance
the mean. 

```{r}
x <- seq(3, 12, 0.25)
x
```

```{r}
mean(x)
min(x)
max(x)
sd(x)
median(x)
```

```{r}
any(x == 8) ## at least one TRUE
all(x > 0) ## all TRUE
```

```{r}
## scaling x to zero mean and one standard deviation
y <- (x - mean(x)) / sd(x)
y
mean(y)
sd(y)
```

## List
A list is a collection of vectors that may have different types.

### Basic operations
```{r}
x <- list(c(1, 2, 3), c("x", "y"), TRUE)
x
```

```{r}
class(x)
typeof(x)
```

```{r}
length(x)
lengths(x) ## length applied to each element of the list
```

Access to elements of the list is different should not be confused to sublist
extraction.

```{r}
x[1] ## sublist
x[[1]] ## element
```

```{r}
class(x[1])
length(x[1])
class(x[[1]])
length(x[[1]])
```

```{r}
x[-1]
```

### Functional operations
```{r}
## our version of lengths
sapply(x, length)
```

```{r}
lapply(x, length)
```

```{r}
lapply(x, class)
```

```{r}
lapply(x, mean)
```

`sapply` tries to turn the result list into a vector if all results have the same
class/type. 

```{r}
sapply(x, class)
```

## Programming structures
### if else
#### Vector case

```{r}
x <- c(0, 1e-5, 5, 10)
log(x)
x * log(x)
```

```{r}
ifelse(x > 0, x * log(x), 0)
```

```{r}
y <- c(0, 1e-5, 5, 10, -5, 4.5)
ifelse(y > 0, y * log(y), 0)
```

```{r}
ifelse(y > 0, y * log(y), ifelse(y < 0, NaN, 0))
```

```{r}
library(dplyr)
```

```{r}
## if_else(x > 0, x * log(x), "0")
ifelse(x > 0, x * log(x), "0")
```

```{r}
case_when(y > 0 ~ y * log(y),
  y == 0 ~ 0,
  .default = NaN
)
```

#### Programming instruction

Curly braces {} are used to group instructions so that R considers the group
as a single instruction. 

```{r}
x <- -5
if (x[1] < 0) {
  print("x*log(x) is not defined")
  print(NaN)
} else {
  print(x[1] * log(x[1]))
}
print("done")
```

#### Application

Conditional downloading: we want to download a large CSV file if it is not
available locally. 

```{r}
library(vroom)
source <- "https://www.data.gouv.fr/fr/datasets/r/69cf54c6-6591-4920-b1d6-2a5292964606"
local_name <- "stops_france.csv.gz"
local_dir <- "data"
## is the directory available?
if (!dir.exists(here(local_dir))) {
  ## create the directory if needed
  dir.create(here(local_dir))
}
## is the file available?
if (!file.exists(here(local_dir, local_name))) {
  ## we need to download it
  spots_france <- vroom(source)
  ## let's save the file to avoid useless downloading
  vroom_write(spots_france, here(local_dir, local_name), delim = ",")
} else {
  ## we need only to load it
  spots_france <- vroom(here(local_dir, local_name))
}
```

If the file is not a CSV file but in another format...
```{r}
library(httr2)
library(readxl)
votes_source <- "https://www.data.gouv.fr/fr/datasets/r/b0106806-0e40-40ee-8db0-53d8a02f0178"
votes_name <- "votes_EU.csv.gz"
if(!file.exists(here(local_dir, votes_name))) {
  votes_req <- request(votes_source)
  votes_xlsx <- votes_req |> req_perform()
  votes_xlsx_file <- file(here(local_dir, "votes_EU.xlsx"),
                          open = "wb",
                          raw = TRUE)
  writeBin(votes_xlsx |> resp_body_raw(), votes_xlsx_file)
  close(votes_xlsx_file)
  votes_EU_xls <- read_xlsx(here(local_dir, "votes_EU.xlsx"))
  vroom_write(votes_EU_xls, here(local_dir, votes_name), delim=",")
  votes_EU <- vroom(here(local_dir, votes_name))
} else {
  votes_EU <- vroom(here(local_dir, votes_name))
}

```


### Loops

```{r}
y <- c(0, 1e-5, 5, 10, -5, 4.5)
toto <- "bla blb blb bl"
for (toto in y) {
  print(toto)
  cat(toto, "\n")
}
print(toto)
```

```{r}
library(ggplot2)
data(diamonds)
```

```{r}
diamond_cuts <- diamonds |>
  pull(cut) |>
  levels()
```

```{r}
all_models <- vector(mode = "list", length = length(diamond_cuts))
names(all_models) <- diamond_cuts
for (one_cut in diamond_cuts) {
  some_diamonds <- diamonds |>
    filter(cut == one_cut) |>
    select(!cut)
  one_figure <- some_diamonds |> 
    ggplot(aes(x = carat, y = price)) +
    geom_bin2d() +
    ggtitle(one_cut)
  print(one_figure)
  price_model <- glm(price ~ ., family = poisson(), data = some_diamonds)
  print(summary(price_model))
  all_models[[one_cut]] <- price_model
}
```
